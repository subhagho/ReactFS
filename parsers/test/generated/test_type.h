/*!
 *  Auto-generated types for schema definition [source schema: test_schema]
 *
 *  Reference Schema Version : 0001.0000
 *  Generated by : subho
 *  Generated on : 2017-01-24 11:45:56.136
 */


#ifndef TEST_TYPE_H
#define TEST_TYPE_H
#include "types/includes/type_defs.h"
#include "types/includes/__base_type.h"



using namespace REACTFS_NS_COMMON_PREFIX;
using namespace REACTFS_NS_CORE_PREFIX::types;



namespace com {
	namespace wookler {
		namespace test {
			/**
			* Generated code for data record type test_type.
			*
			* Note:: Should not be modified as the changes will be lost when the code is re-generated.
			*/
			class test_type  : public com::wookler::reactfs::core::types::__base_type
			{
			private:
				const double * testDouble = nullptr;

				const float * testFloat = nullptr;

				const std::vector<char *> * testListString = nullptr;

				const std::unordered_map<double, char *> * testMapString = nullptr;



				/**
				* Value testDouble setter from the the serialized data map.
				*
				* @param __data - Serialized data map pointer.
				*/
				void read_value_testDouble ( const record_struct *__data )
				{
					if ( NOT_NULL ( __data ) ) {
						const void *__ptr = __data->get_field ( 1 );
						if ( NOT_NULL ( __ptr ) ) {
							// Set the value of testDouble
							const double * __var = static_cast<const double *> ( __ptr );
							CHECK_CAST ( __var, TYPE_NAME ( void * ), TYPE_NAME ( double ) );
							this->testDouble = __var;

						} else {
							this->testDouble = nullptr;
						}
					} else {
						this->testDouble = nullptr;
					}
				}

				/**
				 * Value testFloat setter from the the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void read_value_testFloat ( const record_struct *__data )
				{
					if ( NOT_NULL ( __data ) ) {
						const void *__ptr = __data->get_field ( 2 );
						if ( NOT_NULL ( __ptr ) ) {
							// Set the value of testFloat
							const float * __var = static_cast<const float *> ( __ptr );
							CHECK_CAST ( __var, TYPE_NAME ( void * ), TYPE_NAME ( float ) );
							this->testFloat = __var;

						} else {
							this->testFloat = nullptr;
						}
					} else {
						this->testFloat = nullptr;
					}
				}


			public:
				/**
				* Get the pointer to the property testDouble of type double *.
				* Returns a const pointer.
				*
				* @return double *
				*/
				const double * get_testDouble ( void ) const
				{
					return this->testDouble;
				}

				/**
				 * Get the pointer to the property testFloat of type float *.
				 * Returns a const pointer.
				 *
				 * @return float *
				 */
				const float * get_testFloat ( void ) const
				{
					return this->testFloat;
				}

				/**
				 * Get the pointer to the property testListString of type std::vector<char *> *.
				 * Returns a const pointer.
				 *
				 * @return std::vector<char *> *
				 */
				const std::vector<char *> * get_testListString ( void ) const
				{
					return this->testListString;
				}

				/**
				 * Get the pointer to the property testMapString of type std::unordered_map<double, char *> *.
				 * Returns a const pointer.
				 *
				 * @return std::unordered_map<double, char *> *
				 */
				const std::unordered_map<double, char *> * get_testMapString ( void ) const
				{
					return this->testMapString;
				}

				/**
				 * Create a new read-only instance of test_type.
				 *
				 * Type to be used when instance is being de-serialized from record data.
				 */
				test_type()
				{
					this->testDouble = nullptr;
					this->testFloat = nullptr;
					this->testListString = nullptr;
					this->testMapString = nullptr;

				}

				/**
				 * Descructor for test_type
				 */
				~test_type()
				{

				}

				/**
				 * Deserialize this type instance from the passed data map.
				 *
				 * @param __data - Serialized data record instance to load this type from.
				 */
				void deserialize ( const record_struct *__data ) override
				{
					CHECK_NOT_NULL ( __data );

					this->record_type = __data->get_record_type();
					CHECK_NOT_NULL ( this->record_type );

					// Set the value of testDouble from the serialized data map.
					this->read_value_testDouble ( __data );

					// Set the value of testFloat from the serialized data map.
					this->read_value_testFloat ( __data );



					this->__data = __data;
				}


			};


			/**
			 * Generated code for data record type mutable_test_type.
			 *
			 * Note:: Should not be modified as the changes will be lost when the code is re-generated.
			 */
			class mutable_test_type  : public com::wookler::reactfs::core::types::__mutable_base_type
			{
			private:
				double * testDouble = nullptr;

				float * testFloat = nullptr;

				std::vector<char *> * testListString = nullptr;

				std::unordered_map<double, char *> * testMapString = nullptr;



				/**
				* Method extracts and set the value of testDouble from
				* the serialized data map.
				*
				* @param __data - Serialized data map pointer.
				*/
				void set_serde_testDouble ( mutable_record_struct *__data )
				{
					CHECK_NOT_NULL ( __data );
					if ( NOT_NULL ( this->testDouble ) ) {
						// Add the value of testDouble to the data map.
						{
							const __native_type *ft = get_field_type ( "testDouble" );
							CHECK_NOT_NULL ( ft );
							__data->add_field ( ft->get_index(), this->testDouble );

						}

					}
				}

				/**
				 * Method extracts and set the value of testFloat from
				 * the serialized data map.
				 *
				 * @param __data - Serialized data map pointer.
				 */
				void set_serde_testFloat ( mutable_record_struct *__data )
				{
					CHECK_NOT_NULL ( __data );
					if ( NOT_NULL ( this->testFloat ) ) {
						// Add the value of testFloat to the data map.
						{
							const __native_type *ft = get_field_type ( "testFloat" );
							CHECK_NOT_NULL ( ft );
							__data->add_field ( ft->get_index(), this->testFloat );

						}

					}
				}


			public:
				/**
				* Set the pointer to testDouble.
				*
				* @param testDouble - Pointer of type double *.
				*/
				void set_testDouble ( double * testDouble )
				{
					this->testDouble = testDouble;
				}

				/**
				 * Get the pointer to the property testDouble of type double *.
				 * Returns a const pointer.
				 *
				 * @return double *
				 */
				const double * get_testDouble ( void ) const
				{
					return this->testDouble;
				}

				/**
				 * Set the value to testDouble.
				 *
				 * Method should only be used when this instance is being
				 * used to create or update a new record instance.
				 *
				 * @Param testDouble - Value reference.
				 */
				void set_testDouble ( const double &testDouble )
				{
					if ( IS_NULL ( this->testDouble ) ) {
						this->testDouble = ( double * ) malloc ( sizeof ( double ) );
						CHECK_ALLOC ( this->testDouble, TYPE_NAME ( double ) );
					}
					* ( this->testDouble ) = testDouble;
				}

				/**
				 * Set the pointer to testFloat.
				 *
				 * @param testFloat - Pointer of type float *.
				 */
				void set_testFloat ( float * testFloat )
				{
					this->testFloat = testFloat;
				}

				/**
				 * Get the pointer to the property testFloat of type float *.
				 * Returns a const pointer.
				 *
				 * @return float *
				 */
				const float * get_testFloat ( void ) const
				{
					return this->testFloat;
				}

				/**
				 * Set the value to testFloat.
				 *
				 * Method should only be used when this instance is being
				 * used to create or update a new record instance.
				 *
				 * @Param testFloat - Value reference.
				 */
				void set_testFloat ( const float &testFloat )
				{
					if ( IS_NULL ( this->testFloat ) ) {
						this->testFloat = ( float * ) malloc ( sizeof ( float ) );
						CHECK_ALLOC ( this->testFloat, TYPE_NAME ( float ) );
					}
					* ( this->testFloat ) = testFloat;
				}

				/**
				 * Get the pointer to the property testListString of type std::vector<char *> *.
				 * Returns a const pointer.
				 *
				 * @return std::vector<char *> *
				 */
				const std::vector<char *> * get_testListString ( void ) const
				{
					return this->testListString;
				}

				/**
				 * Set the pointer to testListString.
				 *
				 * @param testListString - Pointer of type std::vector<char *> *.
				 */
				void set_testListString ( std::vector<char *> * testListString )
				{
					this->testListString = testListString;
				}

				/**
				 * Get the pointer to the property testMapString of type std::unordered_map<double, char *> *.
				 * Returns a const pointer.
				 *
				 * @return std::unordered_map<double, char *> *
				 */
				const std::unordered_map<double, char *> * get_testMapString ( void ) const
				{
					return this->testMapString;
				}

				/**
				 * Set the pointer to testMapString.
				 *
				 * @param testMapString - Pointer of type std::unordered_map<double, char *> *.
				 */
				void set_testMapString ( std::unordered_map<double, char *> * testMapString )
				{
					this->testMapString = testMapString;
				}

				/**
				 * Empty constructor when creating an instance of mutable_test_type for setting data locally.
				 * Should be used to create a new record instance of type mutable_test_type.
				 *
				 * @param record_type - Parsed schema definition of this type.
				 */
				mutable_test_type ( const __complex_type *record_type )
				{
					CHECK_NOT_NULL ( record_type );
					this->record_type = record_type;

					this->testDouble = nullptr;
					this->testFloat = nullptr;
					this->testListString = nullptr;
					this->testMapString = nullptr;

				}

				/**
				 * Copy constructor to create a copy instance of mutable_test_type.
				 * Copy instances should be used to update existing records.
				 *
				 * @param source - Source instance of mutable_test_type to copy from.
				 */
				mutable_test_type ( const test_type &source )
				{
					this->record_type = source.get_record_type();
					CHECK_NOT_NULL ( this->record_type );

					this->testDouble = nullptr;
					this->testFloat = nullptr;
					this->testListString = nullptr;
					this->testMapString = nullptr;

					// Set testDouble from the source value.
					if ( NOT_NULL ( source.get_testDouble() ) ) {
						this->set_testDouble ( * ( source.get_testDouble() ) );
					}

// Set testFloat from the source value.
					if ( NOT_NULL ( source.get_testFloat() ) ) {
						this->set_testFloat ( * ( source.get_testFloat() ) );
					}


				}

				/**
				 * Copy constructor to create a copy instance of mutable_test_type.
				 * Copy instances should be used to update existing records.
				 *
				 * @param source - Source instance of mutable_test_type to copy from.
				 */
				mutable_test_type ( const test_type *source )
				{
					this->record_type = source->get_record_type();
					CHECK_NOT_NULL ( this->record_type );

					this->testDouble = nullptr;
					this->testFloat = nullptr;
					this->testListString = nullptr;
					this->testMapString = nullptr;

					// Set testDouble from the source value.
					if ( NOT_NULL ( source->get_testDouble() ) ) {
						this->set_testDouble ( * ( source->get_testDouble() ) );
					}

// Set testFloat from the source value.
					if ( NOT_NULL ( source->get_testFloat() ) ) {
						this->set_testFloat ( * ( source->get_testFloat() ) );
					}


				}

				/**
				 * Descructor for mutable_test_type
				 */
				~mutable_test_type()
				{
					FREE_PTR ( this->testDouble );

					FREE_PTR ( this->testFloat );


				}

				/**
				 * Serialize this type instance into a data map instance.
				 *
				 * @return - Serialized data record instance.
				 */
				mutable_record_struct *serialize() override
				{
					mutable_record_struct *__data = new mutable_record_struct ( this->record_type );
					CHECK_ALLOC ( __data, TYPE_NAME ( mutable_record_struct ) );
					// Call the method to add the value of testDouble to the serialized data map.
					this->set_serde_testDouble ( __data );

// Call the method to add the value of testFloat to the serialized data map.
					this->set_serde_testFloat ( __data );


					return __data;
				}


			};

		}

	}

}

#endif // TEST_TYPE_H

