
/*
 * Copyright [2016] [Subhabrata Ghosh]
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
%token ${type}
%token ${type_ptr}
%token ${src_type_ptr}
%token ${name}
%token ${m_name}
%token ${name_read}
%token ${key_type}
%token ${value_type}
%token ${value_type_ptr}
%token ${src_value_type_ptr}
%token ${return}
%token ${data_var}
%token ${set_map_calls}
%token ${read_map_calls}
%token ${includes}
%token ${nested}
%token ${parent}
%token ${declarations}
%token ${private_functions}
%token ${constructor}
%token ${destructor}
%token ${public_functions}
%token ${header}
%token ${version}
%token ${username}
%token ${date}
%token ${guard_name}
%token ${body}
%token ${variable_inits}
%token ${variable_frees}
%token ${schema_name}
%token ${free_data_calls}
%token ${variable_copy}
%token ${field_index}
%token ${read_serde_calls}
%token ${equals}

VARIABLE_NATIVE_DEF:
${type} ${name} = nullptr;
;;

VARIABLE_NATIVE_FREE:
FREE_PTR(this->${name});
;;

VARIABLE_TYPE_FREE:
CHECK_AND_FREE(this->${name});
;;

VARIABLE_LIST_NATIVE_FREE:
	FREE_NATIVE_LIST(this->${name});
;;

VARIABLE_LIST_TYPE_FREE:
FREE_TYPE_LIST(this->${name});
;;

VARIABLE_MAP_NATIVE_FREE:
	FREE_NATIVE_MAP(this->${name});	
;;

VARIABLE_MAP_TYPE_FREE:
FREE_TYPE_MAP(this->${name});
;;

FUNC_GETTER_DEF:
/**
 * Get the pointer to the property ${name} of type ${return}.
 * Returns a const pointer.
 * 
 * @return ${return}
 */
const ${return} get_${name}(void) const {
    return this->${name};
}
;;

FUNC_SETTER_PTR_DEF:
/**
 * Set the pointer to ${name}.
 * 
 * @param ${name} - Pointer of type ${type}.
 */
void set_${name}(${type} ${name}) {
    this->${name} = ${name};
}
;;

FUNC_NATIVE_SETTER_DEF:
/**
 * Set the value to ${name}.
 * 
 * Method should only be used when this instance is being
 * used to create or update a new record instance.
 *
 * @Param ${name} - Value reference.
 */
void set_${name}(const ${type} &${name}) {
	if (IS_NULL(this->${name})) {
    		this->${name} = (${type_ptr})malloc(sizeof(${type}));
    		CHECK_ALLOC(this->${name}, TYPE_NAME(${type}));
	}
    	*(this->${name}) = ${name};
}
;;

FUNC_STRING_SETTER_DEF:
/**
 * Set the char buffer value from the specified string.
 *
 * Method should only be used when this instance is being
 * used to create or update a new record instance.
 *
 * @param ${name} - String value to set.
 */
void set_${name}(const string &${name}) {
    	FREE_PTR(this->${name});
    	if (!IS_EMPTY(${name})) {
        	uint32_t __size = ${name}.length() + 1;
        	this->${name} = (char *) malloc(sizeof(char) * __size);
        	CHECK_ALLOC(this->${name}, TYPE_NAME(char *));
        	memset(this->${name}, 0, __size);
        	memcpy(this->${name}, ${name}.c_str(), (__size - 1));
    	}
}
;;

FUNC_LIST_NATIVE_ADD_DEF:
/**
 * Add an element to the list ${name}. 
 * Elements are expected to be pre-assigned data
 * value.
 *
 * Method should only be used when this instance is being
 * used to create or update a new record instance.
 *
 * @param ${name} - Data value to add to list.
 */
void add_to_${name}(const ${type} &${name}) {
    if (IS_NULL(this->${name})) {
        this->${name} = new std::vector<${type_ptr}>();
        CHECK_ALLOC(this->${name}, TYPE_NAME(vector));
    }
    ${type_ptr} __var = (${type_ptr})malloc(sizeof(${type}));
    CHECK_ALLOC(__var, TYPE_NAME(${type}));
    *__var = ${name};
    this->${name}->push_back(__var);
}
;;

FUNC_LIST_STRING_ADD_DEF:
/**
 * Add a string element to the list ${name}. 
 * Elements are expected to be pre-assigned data
 * value.
 *
 * Method should only be used when this instance is being
 * used to create or update a new record instance.
 *
 * @param ${name} - String value to add to list.
 */
void add_to_${name}(const string &${name}) {
    if (IS_NULL(this->${name})) {
        this->${name} = new std::vector<${type_ptr}>();
        CHECK_ALLOC(this->${name}, TYPE_NAME(vector));
    }
    if (!IS_EMPTY(${name})) {
        uint32_t __size = ${name}.length() + 1;
        char *__var = (char *)malloc(sizeof(char) * __size);
        CHECK_ALLOC(__var, TYPE_NAME(char *));
        memset(__var, 0, __size);
        memcpy(__var, ${name}.c_str(), (__size - 1));
        this->${name}->push_back(__var);
    }
}
;;

FUNC_LIST_TYPE_ADD_DEF:
/**
 * Add a type element to the list ${name}. 
 * Elements are expected to be pre-allocated type 
 * pointer.
 *
 * Method should only be used when this instance is being
 * used to create or update a new record instance.
 *
 * @param ${name} - String value to add to list.
 */
void add_to_${name}(${type_ptr} ${name}) {
    CHECK_NOT_NULL(${name});
    if (IS_NULL(this->${name})) {
        this->${name} = new std::vector<${type_ptr}>();
        CHECK_ALLOC(this->${name}, TYPE_NAME(vector));
    }
    this->${name}->push_back(${name});
}
;;

FUNC_MAP_NATIVE_ADD_DEF:
/**
 * Add a key/value pair to the map of key type ${key_type}
 * and value type ${value_type}.
 *
 * Method should only be used when this instance is being
 * used to create or update a new record instance.
 *
 * @param m_key - Map key value.
 * @param m_value - Map value.
 */ 
void add_to_${name}(const ${key_type} m_key, const ${value_type} &m_value) {
    if (IS_NULL(this->${name})) {
        this->${name} = new std::unordered_map<${key_type}, ${value_type_ptr}>();
        CHECK_ALLOC(this->${name}, TYPE_NAME(unordered_map));
    }
    ${value_type_ptr} __var = (${value_type_ptr})malloc(sizeof(${value_type}));
    CHECK_ALLOC(__var, TYPE_NAME(${value_type}));
    *__var = m_value;
    this->${name}->insert({m_key, __var});
}
;;

FUNC_MAP_TYPE_ADD_DEF:
/**
 * Add a key/value pair to the map with a type value.
 * The value is expected to be a pre-allocated ${type} pointer.
 *
 * Method should only be used when this instance is being
 * used to create or update a new record instance.
 *
 * @param m_key - ${key_type} key value.
 * @param m_value - ${value_type_ptr} value pointer.
 */ 
void add_to_${name}(${key_type} m_key, ${value_type_ptr} m_value) {
    if (IS_NULL(this->${name})) {
        this->${name} = new std::unordered_map<${key_type}, ${value_type_ptr}>();
        CHECK_ALLOC(this->${name}, TYPE_NAME(unordered_map));
    }
    this->${name}->insert({m_key, m_value});
}
;;

FUNC_MAP_STRING_ADD_DEF:
/**
 * Add a map record of key/value type ${key_type}/${value_type_ptr}.
 *
 * @param m_key - Map key of type ${key_type}
 * @param m_value - String value of the map record value.
 */
void add_to_${name}(const ${key_type} m_key, const string &m_value) {
    if (IS_NULL(this->${name})) {
        this->${name} = new std::unordered_map<${key_type}, ${value_type_ptr}>();
        CHECK_ALLOC(this->${name}, TYPE_NAME(unordered_map));
    }
    CHECK_NOT_EMPTY(m_value);
    uint32_t __size = (m_value.length() + 1) * sizeof(char);
    char *__var = (char *)malloc(sizeof(char) * __size);
    CHECK_ALLOC(__var, TYPE_NAME(char *));
    memset(__var, 0, __size);
    memcpy(__var, m_value.c_str(), (__size - 1));
    this->${name}->insert({m_key, __var});
}
;;

CALL_DESERIALIZE_VALUE:
    // Set the value of ${name} from the serialized data map.
    this->read_value_${name}(__data);
;;

FUNC_SETTER_FROM_RECORD:
/**
 * Value ${name} setter from the the serialized data map.
 *
 * @param __data - Serialized data map pointer.
 */
void read_value_${name}(const record_struct *__data) {
    if (NOT_NULL(__data)) {
        const void *__ptr = __data->get_field(${field_index});
        if (NOT_NULL(__ptr)) {
	    ${read_serde_calls}
	} else {
            this->${name} = nullptr;
        }
    } else {
        this->${name} = nullptr;
    }
}
;;

CALL_NATIVE_READ_FROM_RECORD:
// Set the value of ${name}
const ${type_ptr} __var = static_cast<const ${type_ptr}>(__ptr);
CHECK_CAST(__var, TYPE_NAME(void *), TYPE_NAME(${type}));
this->${name} = __var;
;;

CALL_TYPE_LIST_READ_FROM_RECORD:
// Set the value of list ${name}
std::vector<${type_ptr}> *__var = deserialize_list_${m_name}(__ptr);
CHECK_NOT_NULL(__var);
this->${name} = __var;
;;

CALL_TYPE_MAP_READ_FROM_RECORD:
// Set the value of map ${name}
std::unordered_map<${key_type}, ${value_type_ptr}> *__var = deserialize_map_${m_name}(__ptr);
CHECK_NOT_NULL(__var);
this->${name} = __var;
;;

CALL_TYPE_READ_FROM_RECORD:
// Deserialize and set the value of ${name}
${type_ptr} __var = deserialize_${type}(__ptr);
CHECK_NOT_NULL(__var);
this->${name} = __var;
;;

FUNC_SETTER_TO_RECORD:
/**
 * Method extracts and set the value of ${name} from
 * the serialized data map.
 *
 * @param __data - Serialized data map pointer.
 */
void set_serde_${name}(mutable_record_struct *__data) {
    CHECK_NOT_NULL(__data);
    if (NOT_NULL(this->${name})) {
	${set_map_calls}	
    }
}
;;

CALL_SETTER_TO_RECORD:
// Call the method to add the value of ${name} to the serialized data map.
this->set_serde_${name}(__data);
;;

CALL_NATIVE_SETTER_TO_RECORD:
// Add the value of ${name} to the data map.
{
	const __native_type *ft = get_field_type("${name}");
	CHECK_NOT_NULL(ft);
	__data->add_field(ft->get_index(), this->${name});

}
;;

CALL_TYPE_SETTER_TO_RECORD:
// Serialize the value of ${name} and add to the data map.
{
	void *__ptr = serialize_${type}(this->${name});
	CHECK_NOT_NULL(__ptr);

	const __native_type *ft = get_field_type("${name}");
	CHECK_NOT_NULL(ft);

	__data->add_field(ft->get_index(), __ptr);
}
;;

CALL_TYPE_LIST_SETTER_TO_RECORD:
// Serialize the list ${name} and add to the data map.
{
	void *__ptr = serialize_list_${m_name}(this->${name});
	CHECK_NOT_NULL(__ptr);
	
	const __native_type *ft = get_field_type("${name}");
	CHECK_NOT_NULL(ft);

	__data->add_field(ft->get_index(), __ptr);
}
;;

CALL_TYPE_MAP_SETTER_TO_RECORD:
// Serialize the map ${name} and add to the data map.
{
	void *__ptr = serialize_map_${m_name}(this->${name});
	CHECK_NOT_NULL(__ptr);

	const __native_type *ft = get_field_type("${name}");
	CHECK_NOT_NULL(ft);

	__data->add_field(ft->get_index(), __ptr);
}
;;

FUNC_EQUALS:
/**
 * Compare this type instance to the passed instance.
 * 
 * @param __target - Target instance to compare with. If pointer is not 
 * 			of the same type will throw exception.
 * @return - Is equal?
 */
bool equals(const void* __target) const override {
	if (IS_NULL(__target)) {
		return false;
	}
	const ${type_ptr} __t = static_cast<const ${type_ptr}>(__target);
	CHECK_CAST(__t, TYPE_NAME(void *), TYPE_NAME(${type_ptr}));

	${equals}

	return true;
}
;;

CALL_NATIVE_EQUALS:
{
	// Compare field ${name}
	const __native_type *nt = get_field_type("${name}");
	CHECK_NOT_NULL(nt);
	__base_datatype_io *th = nt->get_type_handler(__record_mode::RM_READ);
	CHECK_NOT_NULL(th);
	const void *tv = __t->get_${name}();
	const void *sv = this->get_${name}();
	if (IS_NULL(sv)) {
		if (NOT_NULL(tv)) {
			return false;
		}
		return true;
	}
	bool r = th->compare(tv, sv, __constraint_operator::EQ);
	if (!r)
		return false;
}
;;

CALL_TYPE_EQUALS:
{
	// Compare type instance ${name}
	const void* tv = __t->get_${name}();
	const ${type_ptr} sv = this->get_${name}();
	if (IS_NULL(sv)) {
		if (NOT_NULL(tv)) {
			return false;
		}
		return true;
	}
	bool r = sv->equals(tv);
	if (!r)
		return false;
}
;;

CALL_NATIVE_LIST_EQUALS:
{
	// Compare list instance ${name}
	const vector<${type_ptr}> *tv = __t->get_${name}();
	const vector<${type_ptr}> *sv = this->get_${name}();
	if (IS_NULL(sv)) {
		if (NOT_NULL(tv)) {
			return false;
		}
		return true;
	}
	if (tv->size() != sv->size()) {
		return false;
	}
	const __native_type *nt = get_field_type("${name}");
	CHECK_NOT_NULL(nt);
	
	PRECONDITION(nt->get_type() == __field_type::LIST);
	const __list_type *lt = dynamic_cast<const __list_type *>(nt);
	CHECK_CAST(lt, TYPE_NAME(__native_type), TYPE_NAME(__list_type));

	// Get type handler for inner type.
	__base_datatype_io *th = lt->get_inner_type()->get_type_handler(__record_mode::RM_READ);
	CHECK_NOT_NULL(th);

	for(uint32_t ii = 0; ii < tv->size(); ii++) {
		const void *v1 = (*sv)[ii];
		const void *v2 = (*tv)[ii];
		if (IS_NULL(v1)) {
			if (NOT_NULL(v2)) {
				return false;
			}
			continue;
		}

		bool r = th->compare(v2, v1, __constraint_operator::EQ);
		if (!r)
			return false;
	}
}
;;

CALL_TYPE_LIST_EQUALS:
{
	// Compare list instance ${name}
	const vector<${type_ptr}> *tv = __t->get_${name}();
	const vector<${type_ptr}> *sv = this->get_${name}();
	if (IS_NULL(sv)) {
		if (NOT_NULL(tv)) {
			return false;
		}
		return true;
	}
	if (tv->size() != sv->size()) {
		return false;
	}

	for(uint32_t ii = 0; ii < tv->size(); ii++) {
		const ${type_ptr} v1 = (*sv)[ii];
		const ${type_ptr} v2 = (*tv)[ii];
		if (IS_NULL(v1)) {
			if (NOT_NULL(v2)) {
				return false;
			}
			continue;
		}
		// Check inner type equals.
		bool r = v1->equals(v2); 
		if (!r)
			return false;
	}
}
;;

CALL_NATIVE_MAP_EQUALS:
{
	// Compare map instance ${name}
	const unordered_map<${key_type}, ${value_type_ptr}> *tv = __t->get_${name}();
	const unordered_map<${key_type}, ${value_type_ptr}> *sv = this->get_${name}();
	if (IS_NULL(sv)) {
		if (NOT_NULL(tv)) {
			return false;
		}
		return true;
	}
	if (tv->size() != sv->size()) {
		return false;
	}
	
	const __native_type *nt = get_field_type("${name}");
	CHECK_NOT_NULL(nt);
	
	PRECONDITION(nt->get_type() == __field_type::MAP);
	const __map_type *mt = dynamic_cast<const __map_type *>(nt);
	CHECK_CAST(mt, TYPE_NAME(__native_type), TYPE_NAME(__map_type));

	// Get type handler for value type.
	__base_datatype_io *th = mt->get_value_type()->get_type_handler(__record_mode::RM_READ);
	CHECK_NOT_NULL(th);

	unordered_map<${key_type}, ${value_type_ptr}>::const_iterator iter_t;
	unordered_map<${key_type}, ${value_type_ptr}>::const_iterator iter_s;
	
	for(iter_s = sv->begin(); iter_s != sv->end(); iter_s++) {
		iter_t = tv->find(iter_s->first);
		if (iter_t == tv->end())
			return false;
		const void *v1 = iter_s->second;
		const void *v2 = iter_t->second;
		if (IS_NULL(v1)) {
			if (NOT_NULL(v2)) {
				return false;
			}
			continue;
		}

		bool r = th->compare(v2, v1, __constraint_operator::EQ);
		if (!r)
			return false;
	}
}
;;

CALL_TYPE_MAP_EQUALS:
{
	// Compare map instance ${name}
	const unordered_map<${key_type}, ${value_type_ptr}> *tv = __t->get_${name}();
	const unordered_map<${key_type}, ${value_type_ptr}> *sv = this->get_${name}();
	if (IS_NULL(sv)) {
		if (NOT_NULL(tv)) {
			return false;
		}
		return true;
	}
	if (tv->size() != sv->size()) {
		return false;
	}

	unordered_map<${key_type}, ${value_type_ptr}>::const_iterator iter_t;
	unordered_map<${key_type}, ${value_type_ptr}>::const_iterator iter_s;
	
	for(iter_s = sv->begin(); iter_s != sv->end(); iter_s++) {
		iter_t = tv->find(iter_s->first);
		if (iter_t == tv->end())
			return false;
		const ${value_type_ptr} v1 = iter_s->second;
		const ${value_type_ptr} v2 = iter_t->second;
		if (IS_NULL(v1)) {
			if (NOT_NULL(v2)) {
				return false;
			}
			continue;
		}
		// Check value type equals.
		bool r = v1->equals(v2);
		if (!r)
			return false;
	}
}
;;

FUNC_SERIALIZE:
/**
 * Serialize this type instance into a data map instance.
 *
 * @return - Serialized data record instance.
 */
mutable_record_struct *serialize() override {
    mutable_record_struct *__data = new mutable_record_struct(this->record_type);
    CHECK_ALLOC(__data, TYPE_NAME(mutable_record_struct));
    ${set_map_calls}
    return __data;
}
;;


FUNC_TYPE_SERIALIZER:
/**
 * Serialize the type value for ${name} and add to the data map.
 *
 * @param __value - Pointer to the field of type ${name}.
 * @return - Serialized data map instance.
 */
mutable_record_struct *serialize_${m_name}(${type_ptr} __value) {
    CHECK_NOT_NULL(__value);
    mutable_record_struct *__data = __value->serialize();
    CHECK_NOT_NULL(__data);
    return __data;
}
;;

FUNC_TYPE_DESERIALIZER:
/**
 * Deserialize an instance of type ${name} from the 
 * passed input data.
 *
 * @param __input - Void pointer to input data of type record_struct
 * @return - Deserialized instance pointer of type ${type_ptr}
 */
${type_ptr} deserialize_${name}(const void *__input) {
    CHECK_NOT_NULL(__input);
    const record_struct *__value = static_cast<const record_struct *>(__input);
    CHECK_CAST(__value, TYPE_NAME(void *), TYPE_NAME(record_struct));
    ${type_ptr} __data = new ${type}();
    __data->deserialize(__value);
    CHECK_ALLOC(__data, TYPE_NAME(${type}));
    return __data;
}
;;

FUNC_TYPE_LIST_SERIALIZER:
/**
 * Serialize the list instance of value type ${type_ptr}.
 *
 * @param __value - Vector instance of ${type_ptr}.
 * @return - Vector of serialized data maps.
 */
std::vector<mutable_record_struct *> *serialize_list_${name}(std::vector<${type_ptr}> *__value) {
    CHECK_NOT_EMPTY_P(__value);
    std::vector<mutable_record_struct *> *__list = new std::vector<mutable_record_struct *>();
    CHECK_ALLOC(__list, TYPE_NAME(vector));
    for (${type_ptr} rec : *(__value)) {
        CHECK_NOT_NULL(rec);
        mutable_record_struct *rv = this->serialize_${type}(rec);
        CHECK_NOT_NULL(rv);
        __list->push_back(rv);
    }
    return __list;
}
;;

FUNC_TYPE_LIST_DESERIALIZER:
/**
 * Deserialize a list instance of type ${type_ptr} from the passed input data.
 *
 * @param __input - Void pointer to input data of type vector<record_struct *>
 * @return - Deserialized pointer to list of type vector<${type_ptr} *>
 */
std::vector<${type_ptr}> *deserialize_list_${name}(const void *__input) {
	CHECK_NOT_NULL(__input);
	const std::vector<record_struct *> *__value = static_cast<const std::vector<record_struct *> *>( __input);
	CHECK_CAST(__value, TYPE_NAME(void *), TYPE_NAME(vector));

	std::vector<${type_ptr}> *__list = new std::vector<${type_ptr}>();
	CHECK_ALLOC(__list, TYPE_NAME(vector));
	for(const record_struct *v : *__value) {
		CHECK_NOT_NULL(v);
		${type_ptr} __tv = deserialize_${type}(v);
		CHECK_NOT_NULL(__tv);
		__list->push_back(__tv);
	}
	return __list;
}
;;

FUNC_TYPE_MAP_SERIALIZER:
/**
 * Serialize a map instance of key/value type ${key_type}/${value_type_ptr} from the passed input data.
 *
 * @param __i_map - Input map data.
 * @return - Serialized data map of key/value type unordered_map<${key_type}, mutable_record_struct *>
 */
std::unordered_map<${key_type}, mutable_record_struct *> *serialize_map_${name}(std::unordered_map<${key_type}, ${value_type_ptr}> *__i_map) {
    CHECK_NOT_EMPTY_P(__i_map);
    std::unordered_map<${key_type}, mutable_record_struct *> *__map = new std::unordered_map<${key_type}, mutable_record_struct *>();
    CHECK_ALLOC(__map, TYPE_NAME(unordered_map));

    std::unordered_map<${key_type}, ${value_type_ptr}>::iterator iter;
    for(iter = __i_map->begin(); iter != __i_map->end(); iter++) {
        const ${key_type} key = iter->first;
        ${value_type_ptr} value = iter->second;
        CHECK_NOT_NULL(value);
        mutable_record_struct *rv = this->serialize_${value_type}(value);
        CHECK_NOT_NULL(rv);
        __map->insert({key, rv});
    }
    return __map;
}
;;

FUNC_TYPE_MAP_DESERIALIZER:
/**
 * Deserialize a map instance of key/value type ${key_type}/${value_type_ptr} from the passed input data.
 *
 * @param __input - Void pointer of type unordered_map<${key_type}, record_struct *>
 * @return - Deserialized map of key/value type unordered_map<${key_type}, ${value_type_ptr}>
 */
std::unordered_map<${key_type}, ${value_type_ptr}> *deserialize_map_${name}(const void *__input) {
	CHECK_NOT_NULL(__input);
	const std::unordered_map<${key_type}, record_struct *> *__value = static_cast<const std::unordered_map<${key_type}, record_struct *> *>( __input);
	CHECK_CAST(__value, TYPE_NAME(void *), TYPE_NAME(unordered_map));
	
	std::unordered_map<${key_type}, ${value_type_ptr}> *__map = new std::unordered_map<${key_type}, ${value_type_ptr}>();
	CHECK_ALLOC(__map, TYPE_NAME(unordered_map));

	std::unordered_map<${key_type}, record_struct *>::const_iterator iter;
	for (iter = __value->begin(); iter != __value->end(); iter++) {
		${value_type_ptr} __tv = deserialize_${value_type}(iter->second);
		CHECK_NOT_NULL(__tv);
		__map->insert({iter->first, __tv});
	}
	return __map;
}
;;

FUNC_DESERIALIZE:
/**
 * Deserialize this type instance from the passed data map.
 *
 * @param __data - Serialized data record instance to load this type from.
 */
void deserialize(const record_struct *__data) override {
    CHECK_NOT_NULL(__data);

    this->record_type = __data->get_record_type();
    CHECK_NOT_NULL(this->record_type);

    ${read_map_calls}

    this->__data = __data;
}
;;

FUNC_CONSTRUCTOR_WRITABLE:
/**
 * Empty constructor when creating an instance of ${name} for setting data locally.
 * Should be used to create a new record instance of type ${name}.
 * 
 * @param record_type - Parsed schema definition of this type.
 */
${name}(const __complex_type *record_type) {
    CHECK_NOT_NULL(record_type);
    this->record_type = record_type;

    ${variable_inits}
}
;;

FUNC_CONSTRUCTOR_READABLE:
/**
 * Create a new read-only instance of ${name}. 
 * 
 * Type to be used when instance is being de-serialized from record data.
 */
${name}() {
    ${variable_inits}
}
;;

FUNC_CONSTRUCTOR_COPY:
/**
 * Copy constructor to create a copy instance of ${name}.
 * Copy instances should be used to update existing records.
 *
 * @param source - Source instance of ${name} to copy from.
 */
${name}(const ${name_read} &source) {
	this->record_type = source.get_record_type();
	CHECK_NOT_NULL(this->record_type);

    	${variable_inits}
	${variable_copy}	
}
;;

FUNC_CONSTRUCTOR_COPY_PTR:
/**
 * Copy constructor to create a copy instance of ${name}.
 * Copy instances should be used to update existing records.
 *
 * @param source - Source instance of ${name} to copy from.
 */
${name}(const ${name_read} *source) {
	this->record_type = source->get_record_type();
	CHECK_NOT_NULL(this->record_type);

    	${variable_inits}
	${variable_copy}	
}
;;

COPY_CALL_NATIVE:
// Set ${name} from the source value.
if (NOT_NULL(source.get_${name}())) {
	this->set_${name}(*(source.get_${name}()));
}
;;

COPY_CALL_NATIVE_PTR:
// Set ${name} from the source value.
if (NOT_NULL(source->get_${name}())) {
	this->set_${name}(*(source->get_${name}()));
}
;;

COPY_CALL_STRING:
// Set ${name} from the source value.
if (NOT_NULL(source.get_${name}())) {
	string __${name} = string(source.get_${name}());
	this->set_${name}(__${name});
}
;;

COPY_CALL_STRING_PTR:
// Set ${name} from the source value.
if (NOT_NULL(source->get_${name}())) {
	string __${name} = string(source->get_${name}());
	this->set_${name}(__${name});
}
;;

COPY_CALL_TYPE:
// Set ${name} from the source value.
if (NOT_NULL(source.get_${name}())) {
	this->${name} = new ${type}(source.get_${name}());
	CHECK_ALLOC(this->${name}, TYPE_NAME(${type}));
}
;;

COPY_CALL_TYPE_PTR:
// Set ${name} from the source value.
if (NOT_NULL(source->get_${name}())) {
	this->${name} = new ${type}(source->get_${name}());
	CHECK_ALLOC(this->${name}, TYPE_NAME(${type}));
}
;;

COPY_CALL_NATIVE_LIST:
// Deserialize the list ${name} from the source value.
if (NOT_EMPTY_P(source.get_${name}())) {
	std::vector<${type_ptr}> *__list = new std::vector<${type_ptr}>();
	CHECK_ALLOC(__list, TYPE_NAME(vector));
	for( const ${type_ptr} v : *(source.get_${name}())) {
		CHECK_NOT_NULL(v);
		${type_ptr} __tv = (${type_ptr}) malloc (sizeof(${type}));
		CHECK_ALLOC(__tv, TYPE_NAME(${type}));
		*__tv = *v;
		__list->push_back(__tv);
	}
	this->${name} = __list;
}
;;

COPY_CALL_NATIVE_LIST_PTR:
// Deserialize the list ${name} from the source value.
if (NOT_EMPTY_P(source->get_${name}())) {
	std::vector<${type_ptr}> *__list = new std::vector<${type_ptr}>();
	CHECK_ALLOC(__list, TYPE_NAME(vector));
	for( const ${type_ptr} v : *(source->get_${name}())) {
		CHECK_NOT_NULL(v);
		${type_ptr} __tv = (${type_ptr}) malloc (sizeof(${type}));
		CHECK_ALLOC(__tv, TYPE_NAME(${type}));
		*__tv = *v;
		__list->push_back(__tv);
	}
	this->${name} = __list;
}
;;

COPY_CALL_TYPE_LIST:
// Deserialize the list ${name} from the source value.
if (NOT_EMPTY_P(source.get_${name}())) {
	std::vector<${type_ptr}> *__list = new std::vector<${type_ptr}>();
	CHECK_ALLOC(__list, TYPE_NAME(vector));
	for( const ${src_type_ptr} v : *(source.get_${name}())) {
		CHECK_NOT_NULL(v);
		${type_ptr} __tv = new ${type}(v);
		CHECK_NOT_NULL(__tv);
		__list->push_back(__tv);
	}
	this->${name} = __list;
}
;;

COPY_CALL_TYPE_LIST_PTR:
// Deserialize the list ${name} from the source value.
if (NOT_EMPTY_P(source->get_${name}())) {
	std::vector<${type_ptr}> *__list = new std::vector<${type_ptr}>();
	CHECK_ALLOC(__list, TYPE_NAME(vector));
	for( const ${src_type_ptr} v : *(source->get_${name}())) {
		CHECK_NOT_NULL(v);
		${type_ptr} __tv = new ${type}(v);
		CHECK_NOT_NULL(__tv);
		__list->push_back(__tv);
	}
	this->${name} = __list;
}
;;
COPY_CALL_NATIVE_MAP:
// Deserialize the map ${name} from the source value.
if (NOT_EMPTY_P(source.get_${name}())) {
	std::unordered_map<${key_type}, ${value_type_ptr}> *__map = new std::unordered_map<${key_type}, ${value_type_ptr}>();
	CHECK_ALLOC(__map, TYPE_NAME(unordered_map));

	const std::unordered_map<${key_type}, ${value_type_ptr}> *__s_map = source.get_${name}();
	std::unordered_map<${key_type}, ${value_type_ptr} >::const_iterator iter;
	for (iter = __s_map->begin(); iter != __s_map->end(); iter++) {
		CHECK_NOT_NULL(iter->second);
		${value_type_ptr} __tv = (${value_type_ptr}) malloc(sizeof(${value_type}));
		CHECK_ALLOC(__tv, TYPE_NAME(${value_type}));
		*__tv = *(iter->second);
		__map->insert({iter->first, __tv});
	}	
	this->${name} = __map;
}
;;

COPY_CALL_NATIVE_MAP_PTR:
// Deserialize the map ${name} from the source value.
if (NOT_EMPTY_P(source->get_${name}())) {
	std::unordered_map<${key_type}, ${value_type_ptr}> *__map = new std::unordered_map<${key_type}, ${value_type_ptr}>();
	CHECK_ALLOC(__map, TYPE_NAME(unordered_map));

	const std::unordered_map<${key_type}, ${value_type_ptr} > *__s_map = source->get_${name}();
	std::unordered_map<${key_type}, ${value_type_ptr} >::const_iterator iter;
	for (iter = __s_map->begin(); iter != __s_map->end(); iter++) {
		CHECK_NOT_NULL(iter->second);
		${value_type_ptr} __tv = (${value_type_ptr}) malloc(sizeof(${value_type}));
		CHECK_ALLOC(__tv, TYPE_NAME(${value_type}));
		*__tv = *(iter->second);
		__map->insert({iter->first, __tv});
	}	
	this->${name} = __map;
}
;;

COPY_CALL_TYPE_MAP:
// Deserialize the map ${name} from the source value.
if (NOT_EMPTY_P(source.get_${name}())) {
	std::unordered_map<${key_type}, ${value_type_ptr}> *__map = new std::unordered_map<${key_type}, ${value_type_ptr}>();
	CHECK_ALLOC(__map, TYPE_NAME(unordered_map));

	const std::unordered_map<${key_type}, ${src_value_type_ptr} > *__s_map =  source.get_${name}();
	std::unordered_map<${key_type}, ${src_value_type_ptr} >::const_iterator iter;
	for (iter = __s_map->begin(); iter != __s_map->end(); iter++) {
		CHECK_NOT_NULL(iter->second);
		${value_type_ptr} __tv = new ${value_type}(*iter->second);
		CHECK_ALLOC(__tv, TYPE_NAME(${value_type}));
		__map->insert({iter->first, __tv});
	}	
	this->${name} = __map;
}
;;

COPY_CALL_TYPE_MAP_PTR:
// Deserialize the map ${name} from the source value.
if (NOT_EMPTY_P(source->get_${name}())) {
	std::unordered_map<${key_type}, ${value_type_ptr}> *__map = new std::unordered_map<${key_type}, ${value_type_ptr}>();
	CHECK_ALLOC(__map, TYPE_NAME(unordered_map));

	const std::unordered_map<${key_type}, ${src_value_type_ptr} > *__s_map =  source->get_${name}();
	std::unordered_map<${key_type}, ${src_value_type_ptr} >::const_iterator iter;
	for (iter = __s_map->begin(); iter != __s_map->end(); iter++) {
		CHECK_NOT_NULL(iter->second);
		${value_type_ptr} __tv = new ${value_type}(iter->second);
		CHECK_ALLOC(__tv, TYPE_NAME(${value_type}));
		__map->insert({iter->first, __tv});
	}	
	this->${name} = __map;
}
;;

FUNC_DESTRUCTOR:
/**
 * Descructor for ${name}
 */
~${name}() {
    	${variable_frees}
}
;;

INCLUDE_BASE:
#include "types/includes/type_defs.h"
#include "types/includes/__base_type.h"

${includes}

using namespace REACTFS_NS_COMMON_PREFIX;
using namespace REACTFS_NS_CORE_PREFIX::types;

;;

NAMESPACE:
namespace ${name} {
    ${nested}
}
;;

CLASS_DEF:
/**
 * Generated code for data record type ${name}.
 *
 * Note:: Should not be modified as the changes will be lost when the code is re-generated.
 */
class ${name} ${parent} {
private:
    ${declarations}

    ${private_functions}
public:
    ${public_functions}
};
;;

FILE_COMMENT:
/*!
 *  Auto-generated types for schema definition [source schema: ${schema_name}]
 *
 *  Reference Schema Version : ${version}
 *  Generated by : ${username}
 *  Generated on : ${date}
 */
;;

FILE_DEF:
${header}

#ifndef ${guard_name}
#define ${guard_name}
${includes}

${body}
#endif // ${guard_name}
;;
